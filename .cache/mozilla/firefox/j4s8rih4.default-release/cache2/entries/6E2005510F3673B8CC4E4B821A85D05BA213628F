
(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      define(factory);
    } else if (typeof exports === 'object') {
      module.exports = factory(require, exports, module);
    } else {
      root.CountUp = factory();
    }
  }(this, function(require, exports, module) {
  
  /*
  
      countUp.js
      by @inorganik
  
  */
  
  // target = id of html element or var of previously selected html element where counting occurs
  // startVal = the value you want to begin at
  // endVal = the value you want to arrive at
  // decimals = number of decimal places, default 0
  // duration = duration of animation in seconds, default 2
  // options = optional object of options (see below)
  
  var CountUp = function(target, startVal, endVal, decimals, duration, options) {
  
      // make sure requestAnimationFrame and cancelAnimationFrame are defined
      // polyfill for browsers without native support
      // by Opera engineer Erik M√É¬∂ller
      var lastTime = 0;
      var vendors = ['webkit', 'moz', 'ms', 'o'];
      for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
          window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
          window.cancelAnimationFrame =
            window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
      }
      if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = function(callback, element) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                timeToCall);
              lastTime = currTime + timeToCall;
              return id;
          };
      }
      if (!window.cancelAnimationFrame) {
          window.cancelAnimationFrame = function(id) {
              clearTimeout(id);
          };
      }
  
      var self = this;
      self.version = function () { return '1.8.5'; };
  
      function formatNumber(num) {
          num = num.toFixed(self.decimals);
          num += '';
          var x, x1, x2, rgx;
          x = num.split('.');
          x1 = x[0];
          x2 = x.length > 1 ? self.options.decimal + x[1] : '';
          rgx = /(\d+)(\d{3})/;
          if (self.options.useGrouping) {
              while (rgx.test(x1)) {
                  x1 = x1.replace(rgx, '$1' + self.options.separator + '$2');
              }
          }
          return self.options.prefix + x1 + x2 + self.options.suffix;
      }
      // Robert Penner's easeOutExpo
      function easeOutExpo(t, b, c, d) {
          return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;
      }
      function ensureNumber(n) {
          return (typeof n === 'number' && !isNaN(n));
      }
      
      // default options
      self.options = {
          useEasing: true, // toggle easing
          useGrouping: true, // 1,000,000 vs 1000000
          separator: ',', // character to use as a separator
          decimal: '.', // character to use as a decimal
          easingFn: easeOutExpo, // optional custom easing function, default is Robert Penner's easeOutExpo
          formattingFn: formatNumber, // optional custom formatting function, default is formatNumber above
          prefix: '', // optional text before the result
          suffix: '' // optional text after the result
      };
  
      // extend default options with passed options object
      if (options && typeof options === 'object') {
          for (var key in self.options) {
              if (options.hasOwnProperty(key) && options[key] !== null) {
                  self.options[key] = options[key];
              }
          }
      }
  
      if (self.options.separator === '') self.options.useGrouping = false;
  
      self.initialize = function() { 
          if (self.initialized) return true;
          self.d = (typeof target === 'string') ? document.getElementById(target) : target;
          if (!self.d) { 
              console.error('[CountUp] target is null or undefined', self.d);
              return false;
          }
          self.startVal = Number(startVal);
          self.endVal = Number(endVal);
          // error checks
          if (ensureNumber(self.startVal) && ensureNumber(self.endVal)) {
              self.decimals = Math.max(0, decimals || 0);
              self.dec = Math.pow(10, self.decimals);
              self.duration = Number(duration) * 1000 || 2000;
              self.countDown = (self.startVal > self.endVal);
              self.frameVal = self.startVal;
              self.initialized = true;
              return true;
          }
          else {
              console.error('[CountUp] startVal or endVal is not a number', self.startVal, self.endVal);
              return false;
          }
      };
  
      // Print value to target
      self.printValue = function(value) {
          var result = self.options.formattingFn(value);
  
          if (self.d.tagName === 'INPUT') {
              this.d.value = result;
          }
          else if (self.d.tagName === 'text' || self.d.tagName === 'tspan') {
              this.d.textContent = result;
          }
          else {
              this.d.innerHTML = result;
          }
      };
  
      self.count = function(timestamp) {
  
          if (!self.startTime) { self.startTime = timestamp; }
  
          self.timestamp = timestamp;
          var progress = timestamp - self.startTime;
          self.remaining = self.duration - progress;
  
          // to ease or not to ease
          if (self.options.useEasing) {
              if (self.countDown) {
                  self.frameVal = self.startVal - self.options.easingFn(progress, 0, self.startVal - self.endVal, self.duration);
              } else {
                  self.frameVal = self.options.easingFn(progress, self.startVal, self.endVal - self.startVal, self.duration);
              }
          } else {
              if (self.countDown) {
                  self.frameVal = self.startVal - ((self.startVal - self.endVal) * (progress / self.duration));
              } else {
                  self.frameVal = self.startVal + (self.endVal - self.startVal) * (progress / self.duration);
              }
          }
  
          // don't go past endVal since progress can exceed duration in the last frame
          if (self.countDown) {
              self.frameVal = (self.frameVal < self.endVal) ? self.endVal : self.frameVal;
          } else {
              self.frameVal = (self.frameVal > self.endVal) ? self.endVal : self.frameVal;
          }
  
          // decimal
          self.frameVal = Math.round(self.frameVal*self.dec)/self.dec;
  
          // format and print value
          self.printValue(self.frameVal);
  
          // whether to continue
          if (progress < self.duration) {
              self.rAF = requestAnimationFrame(self.count);
          } else {
              if (self.callback) self.callback();
          }
      };
      // start your animation
      self.start = function(callback) {
          if (!self.initialize()) return;
          self.callback = callback;
          self.rAF = requestAnimationFrame(self.count);
      };
      // toggles pause/resume animation
      self.pauseResume = function() {
          if (!self.paused) {
              self.paused = true;
              cancelAnimationFrame(self.rAF);
          } else {
              self.paused = false;
              delete self.startTime;
              self.duration = self.remaining;
              self.startVal = self.frameVal;
              requestAnimationFrame(self.count);
          }
      };
      // reset to startVal so animation can be run again
      self.reset = function() {
          self.paused = false;
          delete self.startTime;
          self.initialized = false;
          if (self.initialize()) {
              cancelAnimationFrame(self.rAF);
              self.printValue(self.startVal);
          }
      };
      // pass a new endVal and start animation
      self.update = function (newEndVal) {
          if (!self.initialize()) return;
          newEndVal = Number(newEndVal);
          if (!ensureNumber(newEndVal)) {
              console.error('[CountUp] update() - new endVal is not a number', newEndVal);
              return;
          }
          if (newEndVal === self.frameVal) return;
          cancelAnimationFrame(self.rAF);
          self.paused = false;
          delete self.startTime;
          self.startVal = self.frameVal;
          self.endVal = newEndVal;
          self.countDown = (self.startVal > self.endVal);
          self.rAF = requestAnimationFrame(self.count);
      };
  
      // format startVal on initialization
      if (self.initialize()) self.printValue(self.startVal);
  };
  
  return CountUp;
  
  }));
  ≠ÚA¯èu      dyˇƒdyˇƒE¶	·dÉ5å   o    O^partitionKey=%28https%2Ccommandprompt.com%29,:https://www.commandprompt.com/static/js/countUp.b930f644ce24.js necko:classified 1 strongly-framed 1 security-info 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 request-method GET response-head HTTP/1.1 200 OK
Server: nginx
Date: Fri, 02 Jun 2023 14:22:06 GMT
Content-Type: application/javascript
Content-Length: 8903
Last-Modified: Tue, 22 Sep 2020 14:48:37 GMT
ETag: "5f6a0ec5-22c7"
Strict-Transport-Security: max-age=31536000
Accept-Ranges: bytes
 original-response-headers Server: nginx
Date: Fri, 02 Jun 2023 14:22:06 GMT
Content-Type: application/javascript
Content-Length: 8903
Last-Modified: Tue, 22 Sep 2020 14:48:37 GMT
Connection: keep-alive
ETag: "5f6a0ec5-22c7"
Strict-Transport-Security: max-age=31536000
Accept-Ranges: bytes
 ctid 2 uncompressed-len 0 net-response-time-onstart 2255 net-response-time-onstop 2260   "«